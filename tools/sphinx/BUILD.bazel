load("@pip_process//:requirements.bzl", "all_requirements")
load("@rules_java//java:java_binary.bzl", "java_binary")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@rules_python//sphinxdocs:sphinx.bzl", "sphinx_build_binary")

package(default_visibility = ["//visibility:public"])

# In order to update the requirements, change the `requirements.txt` file and run:
# `bazel run //src:requirements`.
# This will update the `requirements_lock.txt` file.
# To upgrade all dependencies to their latest versions, run:
# `bazel run //docs:requirements -- --upgrade`.
compile_pip_requirements(
    name = "requirements",
    srcs = ["requirements.in"],
    # requirements_lock = "requirements_lock.txt",
    requirements_txt = "requirements.txt",
    tags = ["manual"],
)

# alias(
#     name = "requirements.update",
#     actual = ":requirements",
# )

# This makes it possible for py_venv to depend on plantuml.
# Note: py_venv can only depend on py_library.
# TODO: This can be removed with the next
# upgrade of `aspect_rules_py` since the py_venv rule now supports a data field
# py_library(
#     name = "plantuml_for_python",
#     srcs = ["@score_docs_as_code//src:dummy.py"],
#     data = ["@score_docs_as_code//src:plantuml"],
#     visibility = ["//visibility:public"],
# )

java_binary(
    name = "plantuml",
    jvm_flags = ["-Djava.awt.headless=true"],
    main_class = "net.sourceforge.plantuml.Run",
    visibility = ["//visibility:public"],
    runtime_deps = [
        "@plantuml//jar",
    ],
)

sphinx_build_binary(
    name = "sphinx_build",
    data = [],
    # deps = all_requirements + [":plantuml"],
    visibility = ["//projects:__subpackages__"],
    deps = all_requirements,
)
